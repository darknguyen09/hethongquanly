#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <unordered_map>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <openssl/evp.h>
#include <openssl/sha.h>
#include <sstream>
#include <iomanip>
#include <memory>
#include <cstdio>
#include <stdexcept>
#include <limits>

using namespace std;

const string DATA_DIR = "data/";

string bytesToHexString(const unsigned char* bytes, size_t len) {
    stringstream ss;
    ss << hex << setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << setw(2) << static_cast<int>(bytes[i]);
    }
    return ss.str();
}

class User {
public:
    string username;
    string password;
    string fullName;
    string email;
    string phone;
    string role;
    string walletID;
    bool isAutoGeneratedPassword;
    string oathSecretKey;

    User(string u, string p, string f, string e, string ph, string r, string w, string oathKey, bool autoGen = false)
        : username(u), password(p), fullName(f), email(e), phone(ph), role(r), walletID(w), isAutoGeneratedPassword(autoGen), oathSecretKey(oathKey) {}
};

class Wallet {
public:
    string walletID;
    double balance;
    vector<string> transactionLog;

    Wallet(string id, double b = 0.0) : walletID(id), balance(b) {}
};

string generateRandomPassword(int length) {
    const string charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    string password;
    srand(time(0) + rand());
    for (int i = 0; i < length; ++i) {
        password += charset[rand() % charset.size()];
    }
    return password;
}

string generateOATHSecretKey(int length = 16) {
    const string base32_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
    string key;
    srand(time(0) + rand());
    for (int i = 0; i < length; ++i) {
        key += base32_chars[rand() % base32_chars.size()];
    }
    return key;
}

string hashPassword(const string& password) {
    unsigned char hash[SHA256_DIGEST_LENGTH];
    EVP_MD_CTX* mdctx;
    const EVP_MD* md;

    md = EVP_sha256();
    mdctx = EVP_MD_CTX_new();
    if (mdctx == NULL) {
        cerr << "Loi: Khong the tao EVP_MD_CTX" << endl;
        return "";
    }

    if (1 != EVP_DigestInit_ex(mdctx, md, NULL)) {
        cerr << "Loi: Khong the khoi tao EVP Digest" << endl;
        EVP_MD_CTX_free(mdctx);
        return "";
    }

    if (1 != EVP_DigestUpdate(mdctx, password.c_str(), password.length())) {
         cerr << "Loi: Khong the cap nhat EVP Digest" << endl;
         EVP_MD_CTX_free(mdctx);
         return "";
    }

    if (1 != EVP_DigestFinal_ex(mdctx, hash, NULL)) {
         cerr << "Loi: Khong the hoan thanh EVP Digest" << endl;
         EVP_MD_CTX_free(mdctx);
         return "";
    }

    EVP_MD_CTX_free(mdctx);

    return bytesToHexString(hash, SHA256_DIGEST_LENGTH);
}

void saveUsers(const vector<User>& users, const string& relativeFilename) {
    string filename = DATA_DIR + relativeFilename;
    string backupFilename = filename + ".bak";

    ofstream file(filename);
    if (!file.is_open()) {
        cerr << "Loi: Khong the mo file " << filename << " de ghi (Dam bao thu muc 'data/' ton tai)." << endl;
        return;
    }
    for (const auto& user : users) {
        file << user.username << "," << user.password << "," << user.fullName << ","
             << user.email << "," << user.phone << "," << user.role << ","
             << user.walletID << "," << (user.isAutoGeneratedPassword ? "1" : "0") << ","
             << user.oathSecretKey << "\n";
    }
    file.close();
    string backupCmd = "cp \"" + filename + "\" \"" + backupFilename + "\"";
    #ifdef _WIN32
        backupCmd = "copy \"" + filename + "\" \"" + backupFilename + "\"";
    #endif
    int result = system(backupCmd.c_str());
    if (result != 0) {
         cerr << "Canh bao: Khong the tao file backup cho " << filename << ". Ma loi: " << result << endl;
    }
}

vector<User> loadUsers(const string& relativeFilename) {
    string filename = DATA_DIR + relativeFilename;
    string backupFilename = filename + ".bak";
    vector<User> users;
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Canh bao: Khong the mo file " << filename << ". Dang thu doc tu file backup " << backupFilename << " (Dam bao thu muc 'data/' ton tai)." << endl;
        ifstream backupFile(backupFilename);
        if (backupFile.is_open()) {
            file.swap(backupFile);
        } else {
             cerr << "Canh bao: Khong the mo ca file chinh va file backup trong 'data/'. Bat dau voi danh sach trong." << endl;
             return users;
        }
    }
    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string segment;
        vector<string> seglist;

        while(getline(ss, segment, ',')) {
            seglist.push_back(segment);
        }

        if (seglist.size() >= 9) {
             string username = seglist[0];
             string password = seglist[1];
             string fullName = seglist[2];
             string email = seglist[3];
             string phone = seglist[4];
             string role = seglist[5];
             string walletID = seglist[6];
             bool isAutoGen = (seglist[7] == "1");
             string oathSecretKey = seglist[8];
             users.emplace_back(username, password, fullName, email, phone, role, walletID, oathSecretKey, isAutoGen);
        } else {
            cerr << "Canh bao: Dong du lieu khong hop le trong users.txt: " << line << endl;
        }
    }
    file.close();
    return users;
}

void saveWallets(const vector<Wallet>& wallets, const string& relativeFilename) {
    string filename = DATA_DIR + relativeFilename;
    string backupFilename = filename + ".bak";

    ofstream file(filename);
     if (!file.is_open()) {
        cerr << "Loi: Khong the mo file " << filename << " de ghi (Dam bao thu muc 'data/' ton tai)." << endl;
        return;
    }
    for (const auto& wallet : wallets) {
        file << wallet.walletID << "," << wallet.balance << "\n";
        for (const auto& log : wallet.transactionLog) {
            file << "LOG:" << log << "\n";
        }
    }
    file.close();
    string backupCmd = "cp \"" + filename + "\" \"" + backupFilename + "\"";
    #ifdef _WIN32
        backupCmd = "copy \"" + filename + "\" \"" + backupFilename + "\"";
    #endif
    int result = system(backupCmd.c_str());
     if (result != 0) {
         cerr << "Canh bao: Khong the tao file backup cho " << filename << ". Ma loi: " << result << endl;
    }
}

vector<Wallet> loadWallets(const string& relativeFilename) {
    string filename = DATA_DIR + relativeFilename;
    string backupFilename = filename + ".bak";
    vector<Wallet> wallets;
    ifstream file(filename);
     if (!file.is_open()) {
        cerr << "Canh bao: Khong the mo file " << filename << ". Dang thu doc tu file backup " << backupFilename << " (Dam bao thu muc 'data/' ton tai)." << endl;
        ifstream backupFile(backupFilename);
        if (backupFile.is_open()) {
            file.swap(backupFile);
        } else {
             cerr << "Canh bao: Khong the mo ca file chinh va file backup trong 'data/'. Bat dau voi danh sach trong." << endl;
             return wallets;
        }
    }
    string line;
    Wallet* currentWallet = nullptr;
    while (getline(file, line)) {
        if (line.rfind("LOG:", 0) == 0) {
            if (currentWallet && line.length() > 4) {
                currentWallet->transactionLog.push_back(line.substr(4));
            }
        } else {
            size_t pos = line.find(",");
            if (pos != string::npos) {
                string walletID = line.substr(0, pos);
                try {
                    double balance = stod(line.substr(pos + 1));
                    wallets.emplace_back(walletID, balance);
                    currentWallet = &wallets.back();
                } catch (const std::invalid_argument& ia) {
                    cerr << "Canh bao: Bo qua dong khong hop le trong wallets.txt (khong phai so): " << line << endl;
                    currentWallet = nullptr;
                } catch (const std::out_of_range& oor) {
                     cerr << "Canh bao: Bo qua dong khong hop le trong wallets.txt (so qua lon): " << line << endl;
                     currentWallet = nullptr;
                }
            } else {
                 cerr << "Canh bao: Bo qua dong khong hop le trong wallets.txt (thieu dau phay): " << line << endl;
                 currentWallet = nullptr;
            }
        }
    }
    file.close();
    return wallets;
}

string generateSimulatedOTP() {
    string otp;
    srand(time(0) + rand());
    for (int i = 0; i < 6; ++i) {
        otp += to_string(rand() % 10);
    }
    return otp;
}

bool verifyOTP(const string& secretKey, const string& userOtp) {
    string command = "oathtool --totp -b \"" + secretKey + "\"";
    unique_ptr<FILE, decltype(&pclose)> pipe(popen(command.c_str(), "r"), pclose);
    if (!pipe) {
        cerr << "Loi: Khong the chay lenh oathtool." << endl;
        return false;
    }

    char buffer[128];
    string result = "";
    while (fgets(buffer, sizeof(buffer), pipe.get()) != nullptr) {
        result += buffer;
    }

    if (!result.empty() && result.back() == '\n') {
        result.pop_back();
    }

    return result == userOtp;
}

User registerUser(vector<User>& users, bool isAdminRegistration = false) {
    string username, password, fullName, email, phone, role, walletID, oathSecretKey;
    bool autoGenPassword = false;

    cout << "Nhap ten dang nhap: ";
    cin >> username;

    for (const auto& user : users) {
        if (user.username == username) {
            cout << "Ten dang nhap da ton tai! Vui long chon ten khac.\n";
            return User("", "", "", "", "", "", "", "", false);
        }
    }

    if (isAdminRegistration) {
        cout << "Dang ky boi quan ly, sinh mat khau tu dong.\n";
        password = generateRandomPassword(10);
        autoGenPassword = true;
        cout << "Mat khau tu sinh: " << password << " (Yeu cau nguoi dung doi khi dang nhap lan dau)\n";
    } else {
        cout << "Nhap mat khau: ";
        cin >> password;
    }

    cout << "Nhap ho ten: ";
    cin.ignore();
    getline(cin, fullName);
    cout << "Nhap email: ";
    cin >> email;
    cout << "Nhap so dien thoai: ";
    cin >> phone;
    role = "user";
    walletID = "W_" + username + "_" + to_string(rand() % 1000);
    oathSecretKey = generateOATHSecretKey();

    cout << "\n--- Thiet lap xac thuc hai yeu to (2FA) ---" << endl;
    cout << "Vui long them khoa bi mat nay vao ung dung xac thuc cua ban (Google Authenticator, One Time Password,...):" << endl;
    cout << "Khoa bi mat (Base32): " << oathSecretKey << endl;
    /* string qrCodeUrl = "https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=otpauth://totp/hethongquanly:"
                       + username + "?secret=" + oathSecretKey + "&issuer=hethongquanly";
    cout << "Hoac quet ma QR nay (mo link nay trong trinh duyet): " << qrCodeUrl << endl; */
    cout << "** LUU Y: Day la lan duy nhat khoa nay duoc hien thi. Hay luu lai can than! **" << endl;
    cout << "--------------------------------------------" << endl;
    cout << "Nhan Enter de tiep tuc sau khi da luu khoa...";
    cin.ignore();
    cin.get();

    string hashedPassword = hashPassword(password);
    if (hashedPassword.empty()) {
         cout << "Loi nghiem trong: Khong the bam mat khau." << endl;
         return User("", "", "", "", "", "", "", "", false);
    }

    User newUser(username, hashedPassword, fullName, email, phone, role, walletID, oathSecretKey, autoGenPassword);
    users.push_back(newUser);
    cout << "Dang ky tai khoan thanh cong cho: " << username << endl;
    return newUser;
}

User* login(vector<User>& users) {
    string username, password, otp;
    cout << "Nhap ten dang nhap: ";
    cin >> username;
    cout << "Nhap mat khau: ";
    cin >> password;

    string hashedPassword = hashPassword(password);
    if (hashedPassword.empty()) {
         cout << "Loi khi bam mat khau de so sanh." << endl;
         return nullptr;
    }

    for (auto& user : users) {
        if (user.username == username && user.password == hashedPassword) {
            cout << "Nhap ma OTP tu ung dung xac thuc cua ban: ";
            cin >> otp;

            if (verifyOTP(user.oathSecretKey, otp)) {
                cout << "Xac thuc OTP thanh cong!" << endl;

                if (user.isAutoGeneratedPassword) {
                    cout << "\n** Yeu cau bao mat **" << endl;
                    cout << "Day la lan dang nhap dau tien voi mat khau tu sinh." << endl;
                    cout << "Vui long doi mat khau moi!" << endl;
                    string newPassword, confirmPassword;
                    do {
                        cout << "Nhap mat khau moi: ";
                        cin >> newPassword;
                        cout << "Xac nhan mat khau moi: ";
                        cin >> confirmPassword;
                        if (newPassword != confirmPassword) {
                            cout << "Mat khau xac nhan khong khop. Vui long thu lai.\n";
                        }
                    } while (newPassword != confirmPassword);

                    string newHashedPassword = hashPassword(newPassword);
                    if (newHashedPassword.empty()) {
                        cout << "Loi khi bam mat khau moi. Khong the doi mat khau luc nay." << endl;
                        return nullptr;
                    }
                    user.password = newHashedPassword;
                    user.isAutoGeneratedPassword = false;
                    saveUsers(users, "users.txt");
                    cout << "Doi mat khau thanh cong." << endl;
                }
                 cout << "Dang nhap thanh cong!" << endl;
                return &user;
            } else {
                cout << "Xac thuc OTP that bai!" << endl;
                return nullptr;
            }
        }
    }

    cout << "Dang nhap that bai! Ten dang nhap hoac mat khau khong dung." << endl;
    return nullptr;
}

void changePassword(User& user, vector<User>& users) {
    string currentPassword, newPassword, confirmPassword;
    cout << "Nhap mat khau hien tai: ";
    cin >> currentPassword;

    string currentHashedPassword = hashPassword(currentPassword);
     if (currentHashedPassword.empty()) {
         cout << "Loi khi kiem tra mat khau hien tai." << endl;
         return;
    }

    if (currentHashedPassword != user.password) {
        cout << "Mat khau hien tai khong dung!\n";
        return;
    }

    do {
        cout << "Nhap mat khau moi: ";
        cin >> newPassword;
        cout << "Xac nhan mat khau moi: ";
        cin >> confirmPassword;
        if (newPassword != confirmPassword) {
            cout << "Mat khau xac nhan khong khop. Vui long thu lai.\n";
        }
    } while (newPassword != confirmPassword);

    string otp = generateSimulatedOTP();
    cout << "Ma OTP (mo phong gui den email/phone " << user.email << "/" << user.phone << "): " << otp << "\n";
    string inputOtp;
    cout << "Nhap ma OTP da nhan duoc: ";
    cin >> inputOtp;

    if (inputOtp == otp) {
        string newHashedPassword = hashPassword(newPassword);
        if (newHashedPassword.empty()) {
             cout << "Loi khi bam mat khau moi. Khong the doi mat khau." << endl;
             return;
        }
        user.password = newHashedPassword;
        user.isAutoGeneratedPassword = false;
        saveUsers(users, "users.txt");
        cout << "Doi mat khau thanh cong!\n";
    } else {
        cout << "Ma OTP khong dung! Doi mat khau that bai.\n";
    }
}

void updateProfile(User& user, vector<User>& users) {
    string fullName, email, phone;

    cout << "Nhap ho ten moi (hien tai: " << user.fullName << "): ";
    cin.ignore();
    getline(cin, fullName);
    cout << "Nhap email moi (hien tai: " << user.email << "): ";
    cin >> email;
    cout << "Nhap so dien thoai moi (hien tai: " << user.phone << "): ";
    cin >> phone;
    string otp = generateSimulatedOTP();
    cout << "Ma OTP (mo phong gui den email/phone cu " << user.email << "/" << user.phone << "): " << otp << "\n";
    string inputOtp;
    cout << "Nhap ma OTP: ";
    cin >> inputOtp;

    if (inputOtp == otp) {
        user.fullName = fullName;
        user.email = email;
        user.phone = phone;
        saveUsers(users, "users.txt");
        cout << "Cap nhat thong tin thanh cong!\n";
    } else {
        cout << "Ma OTP khong dung! Cap nhat that bai.\n";
    }
}

void transferPoints(User& sender, vector<User>& users, vector<Wallet>& wallets) {
    string destWalletID;
    double points;
    cout << "Nhap ma vi dich (walletID): ";
    cin >> destWalletID;
    cout << "Nhap so diem can chuyen: ";
    cin >> points;

    if (points <= 0) {
        cout << "So diem chuyen phai lon hon 0.\n";
        return;
    }

    Wallet* senderWallet = nullptr;
    Wallet* destWallet = nullptr;
    User* destUser = nullptr;

    for (auto& wallet : wallets) {
        if (wallet.walletID == sender.walletID) senderWallet = &wallet;
        if (wallet.walletID == destWalletID) destWallet = &wallet;
    }

    if (!senderWallet) {
        cerr << "Loi: Khong tim thay vi cua nguoi gui!\n";
        return;
    }
    if (!destWallet) {
        cout << "Vi dich khong ton tai!\n";
        return;
    }
    if (senderWallet == destWallet) {
        cout << "Ban khong the chuyen diem cho chinh minh.\n";
        return;
    }

     if (senderWallet->balance < points) {
        cout << "So du khong du! (So du hien tai: " << senderWallet->balance << ")\n";
        return;
    }

    string destUsername = "Khong ro";
    for(const auto& u : users) {
        if(u.walletID == destWalletID) {
            destUsername = u.username;
            break;
        }
    }

    cout << "Ban chuan bi chuyen " << points << " diem den vi " << destWalletID << " (cua user: " << destUsername <<").\n";
    string otp = generateSimulatedOTP();
    cout << "Ma OTP (mo phong gui den email/phone " << sender.email << "/" << sender.phone << "): " << otp << "\n";
    string inputOtp;
    cout << "Nhap ma OTP de xac nhan giao dich: ";
    cin >> inputOtp;

    if (inputOtp == otp) {
        senderWallet->balance -= points;
        destWallet->balance += points;
        time_t now = time(0);
        string dt = ctime(&now);
        dt.pop_back();
        string logSender = "[" + dt + "] Chuyen " + to_string(points) + " diem toi " + destWallet->walletID + " (User: " + destUsername + ")";
        string logDest = "[" + dt + "] Nhan " + to_string(points) + " diem tu " + senderWallet->walletID + " (User: " + sender.username + ")";
        senderWallet->transactionLog.push_back(logSender);
        destWallet->transactionLog.push_back(logDest);
        saveWallets(wallets, "wallets.txt");
        cout << "Chuyen diem thanh cong!\n";
    } else {
        cout << "Ma OTP khong dung! Giao dich huy bo.\n";
    }
}
void viewWallet(const User& user, const vector<Wallet>& wallets) {
    bool found = false;
    for (const auto& wallet : wallets) {
        if (wallet.walletID == user.walletID) {
            cout << "\n--- Thong tin vi ---" << endl;
            cout << "Ma vi: " << wallet.walletID << "\n";
            cout << "So du: " << fixed << setprecision(2) << wallet.balance << " diem\n";
            cout << "Lich su giao dich:\n";
            if (wallet.transactionLog.empty()) {
                cout << "  (Chua co giao dich nao)\n";
            } else {
                for (auto it = wallet.transactionLog.rbegin(); it != wallet.transactionLog.rend(); ++it) {
                     cout << "  - " << *it << "\n";
                }
            }
             cout << "--------------------" << endl;
            found = true;
            return;
        }
    }
     if (!found) {
         cerr << "Loi: Khong tim thay vi lien ket voi tai khoan nay (" << user.walletID << ")." << endl;
     }
}

void viewUsers(const vector<User>& users) {
     cout << "\n--- Danh sach nguoi dung ---" << endl;
     cout << left << setw(20) << "Username" << setw(15) << "Role" << setw(30) << "Full Name" << setw(15) << "Wallet ID" << endl;
     cout << setfill('-') << setw(80) << "" << setfill(' ') << endl;
     for (const auto& user : users) {
         cout << left << setw(20) << user.username
              << setw(15) << user.role
              << setw(30) << user.fullName
              << setw(15) << user.walletID << endl;
     }
     cout << "--------------------------" << endl;
}

void adminEditUser(vector<User>& users) {
     string targetUsername;
     cout << "Nhap ten dang nhap cua nguoi dung can chinh sua: ";
     cin >> targetUsername;

     User* targetUser = nullptr;
     for (auto& user : users) {
         if (user.username == targetUsername) {
             targetUser = &user;
             break;
         }
     }

     if (targetUser) {
        cout << "Tim thay nguoi dung: " << targetUsername << ". Bat dau cap nhat thong tin (nhan Enter de bo qua neu khong muon thay doi)." << endl;
        string fullName, email, phone, role;
        cout << "Nhap ho ten moi (hien tai: " << targetUser->fullName << "): ";
        cin.ignore();
        getline(cin, fullName);
        if (!fullName.empty()) targetUser->fullName = fullName;
        cout << "Nhap email moi (hien tai: " << targetUser->email << "): ";
        cin >> email;
        if (!email.empty()) targetUser->email = email;
        cout << "Nhap so dien thoai moi (hien tai: " << targetUser->phone << "): ";
        cin >> phone;
        if (!phone.empty()) targetUser->phone = phone;
        cout << "Nhap vai tro moi (user/admin) (hien tai: " << targetUser->role << "): ";
        cin >> role;
         if (!role.empty() && (role == "user" || role == "admin")) {
             targetUser->role = role;
         } else if (!role.empty()) {
             cout << "Vai tro khong hop le. Giu nguyen vai tro hien tai." << endl;
         }

         // out << "Ban co muon reset mat khau cho nguoi dung nay khong? (y/n): ";
         // char resetPassChoice; cin >> resetPassChoice;
         // if (resetPassChoice == 'y' || resetPassChoice == 'Y') { ... logic reset ... }

         saveUsers(users, "users.txt");
         cout << "Cap nhat thong tin cho " << targetUsername << " thanh cong!\n";
     } else {
         cout << "Khong tim thay nguoi dung voi ten dang nhap: " << targetUsername << endl;
     }
}

int main() {
    srand(time(0));
    vector<User> users = loadUsers("users.txt");
    vector<Wallet> wallets = loadWallets("wallets.txt");
    bool walletsChanged = false;
    unordered_map<string, bool> existingWallets;
    for (const auto& wallet : wallets) {
        existingWallets[wallet.walletID] = true;
    }
    for (const auto& user : users) {
        if (existingWallets.find(user.walletID) == existingWallets.end()) {
            if (!user.walletID.empty()) {
                 wallets.emplace_back(user.walletID, 0.0);
                 cout << "Da tao vi moi " << user.walletID << " cho nguoi dung " << user.username << endl;
                 walletsChanged = true;
            } else {
                 cerr << "Loi: Nguoi dung " << user.username << " khong co Wallet ID hop le." << endl;
            }

        }
    }
    if (walletsChanged) {
        saveWallets(wallets, "wallets.txt");
    }
    bool adminExists = false;
    for(const auto& user : users) {
        if (user.username == "admin") {
            adminExists = true;
            break;
        }
    }
    if (!adminExists) {
        cout << "Admin mac dinh chua ton tai. Dang tao admin..." << endl;
        string adminPass = "admin123";
        string adminOathKey = generateOATHSecretKey();
        string hashedAdminPass = hashPassword(adminPass);
         if (!hashedAdminPass.empty()) {
            users.emplace_back("admin", hashedAdminPass, "Quan Tri Vien", "admin@gmail.com", "000000000", "admin", "W_admin_0", adminOathKey, true);
             cout << "Da tao tai khoan admin mac dinh:" << endl;
             cout << "  Username: admin" << endl;
             cout << "  Password: " << adminPass << " (Yeu cau doi ngay!)" << endl;
             cout << "  OATH Secret (Base32): " << adminOathKey << " (Them vao app xac thuc!)" << endl;
             /* string qrCodeUrl = "https://chart.googleapis.com/chart?chs=200x200&cht=qr&chl=otpauth://totp/hethongquanly:admin?secret=" + adminOathKey + "&issuer=hethongquanly";
             cout << "  QR Code URL: " << qrCodeUrl << endl; */

             if (existingWallets.find("W_admin_0") == existingWallets.end()) {
                  wallets.emplace_back("W_admin_0", 0.0);
                  saveWallets(wallets, "wallets.txt");
             }

            saveUsers(users, "users.txt");
         } else {
              cerr << "Loi: Khong the tao mat khau cho admin mac dinh." << endl;
         }

    }


    while (true) {
        cout << "\n========== HE THONG QUAN LY ==========" << endl;
        cout << "1. Dang nhap" << endl;
        cout << "2. Dang ky (Nguoi dung tu dang ky)" << endl;
        cout << "3. Thoat" << endl;
        cout << "======================================" << endl;
        cout << "Chon chuc nang: ";
        int choice;
        cin >> choice;
        if (cin.fail()) {
            cout << "Lua chon khong hop le. Vui long nhap so." << endl;
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            continue;
        }
        User* currentUser = nullptr;

        if (choice == 1) {
            currentUser = login(users);
            if (!currentUser) {
                cout << "Vui long thu lai." << endl;
                continue;
            }
            while (currentUser != nullptr) {
                cout << "\n---------- Chao " << currentUser->username << " (" << currentUser->role << ") ----------" << endl;
                cout << "1. Xem thong tin ca nhan" << endl;
                cout << "2. Cap nhat thong tin ca nhan" << endl;
                cout << "3. Doi mat khau" << endl;
                cout << "4. Quan ly vi diem thuong" << endl;
                int nextOption = 5;
                if (currentUser->role == "admin") {
                    cout << nextOption++ << ". Xem danh sach nguoi dung" << endl;
                    cout << nextOption++ << ". Tao tai khoan moi (cho nguoi dung)" << endl;
                    cout << nextOption++ << ". Chinh sua tai khoan nguoi dung" << endl;
                }
                cout << nextOption << ". Dang xuat" << endl;
                cout << "------------------------------------------" << endl;
                cout << "Chon chuc nang: ";
                int userChoice;
                cin >> userChoice;
                 if (cin.fail()) {
                    cout << "Lua chon khong hop le. Vui long nhap so." << endl;
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    continue;
                }
                if (userChoice == 1) {
                    cout << "\n--- Thong tin ca nhan ---" << endl;
                    cout << "Username: " << currentUser->username << endl;
                    cout << "Full Name: " << currentUser->fullName << endl;
                    cout << "Email: " << currentUser->email << endl;
                    cout << "Phone: " << currentUser->phone << endl;
                    cout << "Role: " << currentUser->role << endl;
                    cout << "Wallet ID: " << currentUser->walletID << endl;
                    cout << "-------------------------" << endl;
                } else if (userChoice == 2) {
                    updateProfile(*currentUser, users);
                } else if (userChoice == 3) {
                    changePassword(*currentUser, users);
                } else if (userChoice == 4) {
                    while (true) {
                         cout << "\n--- Quan ly Vi Diem Thuong ---" << endl;
                         cout << "1. Xem thong tin vi & lich su giao dich" << endl;
                         cout << "2. Chuyen diem" << endl;
                         cout << "3. Quay lai menu truoc" << endl;
                         cout << "------------------------------" << endl;
                         cout << "Chon: ";
                         int walletChoice;
                         cin >> walletChoice;
                         if (cin.fail()) {
                            cout << "Lua chon khong hop le." << endl;
                            cin.clear();
                            cin.ignore(numeric_limits<streamsize>::max(), '\n');
                            continue;
                         }
                         if (walletChoice == 1) {
                             viewWallet(*currentUser, wallets);
                         } else if (walletChoice == 2) {
                             transferPoints(*currentUser, users, wallets);
                         } else if (walletChoice == 3) {
                             break;
                         } else {
                             cout << "Lua chon khong hop le." << endl;
                         }
                    }
                } else if (userChoice >= 5) {
                    int logoutOption = 5;
                    if (currentUser->role == "admin") {
                        if (userChoice == logoutOption++) {
                            viewUsers(users);
                        } else if (userChoice == logoutOption++) {
                            cout << "\n--- Tao tai khoan moi (Admin) ---" << endl;
                            User newUser = registerUser(users, true);
                            if (!newUser.username.empty()) {
                                bool newWalletNeeded = true;
                                for(const auto& w : wallets) {
                                    if (w.walletID == newUser.walletID) {
                                        newWalletNeeded = false;
                                        break;
                                    }
                                }
                                if (newWalletNeeded && !newUser.walletID.empty()) {
                                     wallets.emplace_back(newUser.walletID, 0.0);
                                     saveWallets(wallets, "wallets.txt");
                                     cout << "Da tu dong tao vi " << newUser.walletID << " cho nguoi dung moi." << endl;
                                }
                                saveUsers(users, "users.txt");
                            } else {
                                 cout << "Tao tai khoan moi that bai." << endl;
                            }
                        } else if (userChoice == logoutOption++) {
                             adminEditUser(users);
                        }
                    }
                    if (userChoice == logoutOption) {
                        cout << "Dang xuat..." << endl;
                        currentUser = nullptr;
                        break;
                    } else if (userChoice > logoutOption) {
                         cout << "Lua chon khong hop le." << endl;
                    }
                } else {
                     cout << "Lua chon khong hop le." << endl;
                }
            }
        } else if (choice == 2) {
            cout << "\n--- Dang ky tai khoan moi ---" << endl;
            User newUser = registerUser(users);
             if (!newUser.username.empty()) {
                bool newWalletNeeded = true;
                for(const auto& w : wallets) {
                    if (w.walletID == newUser.walletID) {
                        newWalletNeeded = false;
                        break;
                    }
                }
                if (newWalletNeeded && !newUser.walletID.empty()) {
                     wallets.emplace_back(newUser.walletID, 0.0);
                     saveWallets(wallets, "wallets.txt");
                     cout << "Da tu dong tao vi " << newUser.walletID << " cho ban." << endl;
                }
                saveUsers(users, "users.txt");
            } else {
                 cout << "Dang ky that bai (Co the do ten dang nhap da ton tai hoac loi khac)." << endl;
            }
        } else if (choice == 3) {
            cout << "Tam biet!" << endl;
            break;
        } else {
            cout << "Lua chon khong hop le. Vui long chon lai." << endl;
        }
    }
    return 0;
}
